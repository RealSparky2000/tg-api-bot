from aiogram import F, Router, Bot
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, ReplyKeyboardRemove, FSInputFile
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from app.config import bot

import app.keyboards as kb
import urllib.parse

from assets.info import FILEPATH, FILE_CAPTION

from filters.chat_subscriber import IsSubscriber
import crm.api as crm

router = Router()
print("Bot has successfully started!")

class User(StatesGroup):
    name = State()
    age = State()
    activity = State()
    average_income = State()
    goal = State()


@router.message(CommandStart(), IsSubscriber(bot))
async def start(message: Message, state: FSMContext):
    existing_user = await crm.get_lead_by_tg_id(str(message.from_user.id))
    if existing_user:
        await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –∞–Ω–∫–µ—Ç—É –µ—â–µ —Ä–∞–∑! –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ, –ø—Ä–æ—Å–∏–º –≤–∞—Å —Å–ª–µ–¥–∏—Ç—å –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –Ω–∞—à–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–µ :)",
                             reply_markup=kb.existing_lead)
    else:
        await state.set_state(User.name)
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? (–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å –ø—Ä–æ—Å—Ç–æ–≥–æ!)", reply_markup=ReplyKeyboardRemove())

@router.message(User.name)
async def reg_two(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(User.age)
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç? –ò–ª–∏ —Å–∫–æ–ª—å–∫–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª, —á—Ç–æ–±—ã –±—ã–ª–æ? üôÇ")

@router.message(User.age)
async def reg_three(message: Message, state: FSMContext):
    await state.update_data(age=message.text)
    await state.set_state(User.activity)
    await message.answer(f'''–¢—ã —Å–µ–π—á–∞—Å —É—á–∏—à—å—Å—è, —Ä–∞–±–æ—Ç–∞–µ—à—å –∏–ª–∏ —Å–æ–≤–º–µ—â–∞–µ—à—å –≤—Å–µ —Å—Ä–∞–∑—É?
(–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç)
1) –£—á—É—Å—å
2) –†–∞–±–æ—Ç–∞—é
3) –ò —Ç–æ, –∏ –¥—Ä—É–≥–æ–µ
4) –°–≤–æ–±–æ–¥–Ω—ã–π —Ö—É–¥–æ–∂–Ω–∏–∫ –∂–∏–∑–Ω–∏ üé®''', reply_markup=kb.user_activity)


@router.callback_query(User.activity)
async def reg_activity(callback: CallbackQuery, state: FSMContext):
    activity_mapping = {
        "activity_1": "–£—á—É—Å—å",
        "activity_2": "–†–∞–±–æ—Ç–∞—é",
        "activity_3": "–ò —Ç–æ, –∏ –¥—Ä—É–≥–æ–µ",
        "activity_4": "–°–≤–æ–±–æ–¥–Ω—ã–π —Ö—É–¥–æ–∂–Ω–∏–∫ –∂–∏–∑–Ω–∏"
    }

    activity = activity_mapping.get(callback.data, "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    await state.update_data(activity=activity)
    await state.set_state(User.average_income)
    await callback.message.answer(f'''–í–∞—à –¥–æ—Ö–æ–¥ - —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –æ—Ä—É–∂–∏–µ!
–ú—ã –∑–Ω–∞–µ–º, —á—Ç–æ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã –æ –¥–µ–Ω—å–≥–∞—Ö - —ç—Ç–æ –Ω–µ –≤—Å–µ–≥–¥–∞ –≤–µ—Å–µ–ª–æ, –Ω–æ –¥–∞–≤–∞–π—Ç–µ –ø–æ–¥–æ–π–¥–µ–º –∫ —ç—Ç–æ–º—É —Å —é–º–æ—Ä–æ–º! üòâ

–ö–∞–∫–æ–π —É –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å –¥–æ—Ö–æ–¥–∞?
(–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, –≤–∞—à–µ –±–æ–≥–∞—Ç—Å—Ç–≤–æ –æ—Å—Ç–∞–Ω–µ—Ç—å—Å—è –≤ —Å–µ–∫—Ä–µ—Ç–µ, –∞ –æ—Ç–≤–µ—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)

1. üí∏ –Ø –∫–∞–∫ –≤–æ–ª—à–µ–±–Ω–∏–∫ - –∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü "—Ñ–æ–∫—É—Å" —Å –¥–µ–Ω—å–≥–∞–º–∏, –Ω–æ –æ–±—ã—á–Ω–æ –∏—Ö —Ö–≤–∞—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–∞—Ä—É –ø–∏—Ü—Ü.
2. üè† –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Å—á–∞—Å—Ç—å—è - —Ö–≤–∞—Ç–∞–µ—Ç –Ω–∞ –∫–æ–º—Ñ–æ—Ä—Ç –∏ –∫–∞—Ñ–µ —Å –¥—Ä—É–∑—å—è–º–∏, –Ω–æ –≤ –ü–∞—Ä–∏–∂ –µ—â–µ –Ω–µ —Å–≥–æ–Ω—è–ª.
3. üíº –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞ - –∏–ø–æ—Ç–µ–∫–∞ –æ–ø–ª–∞—á–µ–Ω–∞, –æ—Ç–ø—É—Å–∫ –Ω–∞ –ú–∞–ª—å–¥–∏–≤–∞—Ö - –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ.
4. üèñ –Ø - –±–æ–≥–∞—Ç –∫–∞–∫ –ö—Ä–µ–∑ - —É –º–µ–Ω—è –µ—Å—Ç—å –≤—Å—ë, —á—Ç–æ –Ω—É–∂–Ω–æ, –∏ –¥–∞–∂–µ —Ç–æ, —á—Ç–æ —è –µ—â—ë –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –º–Ω–µ –Ω—É–∂–Ω–æ!
5. ü§´ –°–µ–∫—Ä–µ—Ç, –Ω–µ –±—É–¥—É —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å - —è —Ü–µ–Ω—é —Å–≤–æ—é –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—å, —Ç–∞–∫ —á—Ç–æ –Ω–µ –≥–æ–≤–æ—Ä–∏—Ç–µ –Ω–∏–∫–æ–º—É!''', reply_markup=kb.income)


@router.callback_query(User.average_income)
async def reg_income(callback: CallbackQuery, state: FSMContext):
    income_mapping = {
        "income_1": "–Ø –∫–∞–∫ –≤–æ–ª—à–µ–±–Ω–∏–∫",
        "income_2": "–°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä —Å—á–∞—Å—Ç—å—è",
        "income_3": "–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞",
        "income_4": "–Ø - –±–æ–≥–∞—Ç –∫–∞–∫ –ö—Ä–µ–∑",
        "income_5": "–°–µ–∫—Ä–µ—Ç, –Ω–µ –±—É–¥—É —Ä–∞—Å–∫—Ä—ã–≤–∞—Ç—å"
    }

    income = income_mapping.get(callback.data, "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    await state.update_data(average_income=income)
    await state.set_state(User.goal)
    await callback.message.answer(f'''–ó–∞—á–µ–º —Ç—ã –≤–æ–æ–±—â–µ —Å—é–¥–∞ –ø—Ä–∏—à–µ–ª? –ß—Ç–æ —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ?
(–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç)
1. –•–æ—á—É —Å—Ç–∞—Ç—å –≥—É—Ä—É –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π
2. –ò–Ω—Ç–µ—Ä–µ—Å—É—é—Å—å –Ω–æ–≤—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏
3. –ò—Å–∫–∞—Ç—å –∫—Ä—É—Ç—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è
4. –ü—Ä–æ—Å—Ç–æ –ª—é–±–ª—é –æ–±—â–∞—Ç—å—Å—è —Å —É–º–Ω—ã–º–∏ –ª—é–¥—å–º–∏
5. –°–ª—É—á–∞–π–Ω–æ –∑–∞–±—Ä–µ–ª, –Ω–æ —Ç–µ–ø–µ—Ä—å –º–Ω–µ —Ç—É—Ç –Ω—Ä–∞–≤–∏—Ç—å—Å—è üòÖ''', reply_markup=kb.goal)


@router.callback_query(User.goal)
async def reg_complete(callback: CallbackQuery, state: FSMContext):
    goal_mapping = {
        "goal_1": "–•–æ—á—É —Å—Ç–∞—Ç—å –≥—É—Ä—É –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π",
        "goal_2": "–ò–Ω—Ç–µ—Ä–µ—Å—É—é—Å—å –Ω–æ–≤—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏",
        "goal_3": "–ò—Å–∫–∞—Ç—å –∫—Ä—É—Ç—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–ª–µ–Ω–∏—è",
        "goal_4": "–ü—Ä–æ—Å—Ç–æ –ª—é–±–ª—é –æ–±—â–∞—Ç—å—Å—è —Å —É–º–Ω—ã–º–∏ –ª—é–¥—å–º–∏",
        "goal_5": "–°–ª—É—á–∞–π–Ω–æ –∑–∞–±—Ä–µ–ª, –Ω–æ —Ç–µ–ø–µ—Ä—å –º–Ω–µ —Ç—É—Ç –Ω—Ä–∞–≤–∏—Ç—å—Å—è"
    }

    goal = goal_mapping.get(callback.data, "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
    await state.update_data(goal=goal)

    data = await state.get_data()
    data["tg_id"] = str(callback.message.chat.id)

    await crm.add_lead(data)

    await callback.message.answer("–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã! –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ PDF-–≥–∞–π–¥...")
    await callback.message.answer_document(document=FSInputFile(FILEPATH), caption=FILE_CAPTION)

    await state.clear()

@router.message(F.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", IsSubscriber(bot))
async def retry_reg(message:Message, state: FSMContext):
    await start(message, state)